{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","components/NewTodo/NewTodo.tsx","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","todoClasses","classNames","completed","id","title","TodoList","todos","map","username","userId","NewTodo","onAdd","getTodoId","useState","setUserId","setTitle","formSubmitted","setFormSubmitted","action","method","onSubmit","event","preventDefault","trim","length","newTodo","type","placeholder","value","onChange","target","disabled","usersFromServer","App","todosFromServer","setTodo","todoList","find","currentTodos","ids","Math","max","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a49c007.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { ToDo } from '../../types/ToDo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: ToDo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const todoClasses = classNames('TodoInfo', {\n    'TodoInfo--completed': todo.completed,\n  });\n\n  return (\n    <article\n      className={todoClasses}\n      data-id={todo.id}\n      key={todo.id}\n    >\n      <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n\n      {todo.user && (\n        <UserInfo user={todo.user} />\n      )}\n    </article>\n  );\n};\n","import React from 'react';\n\nimport { ToDo } from '../../types/ToDo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: ToDo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React, { useState } from 'react';\n\nimport usersFromServer from '../../api/users';\nimport { ToDo } from '../../types/ToDo';\n\ntype Props = {\n  onAdd: (todo: ToDo) => void;\n  getTodoId: () => number;\n};\n\nexport const NewTodo: React.FC<Props> = ({ onAdd, getTodoId }) => {\n  const [userId, setUserId] = useState(0);\n  const [title, setTitle] = useState('');\n  const [formSubmitted, setFormSubmitted] = useState(false);\n\n  const changeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const changeUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setFormSubmitted(true);\n\n    if (title.trim().length > 0 && userId > 0) {\n      const newTodo: ToDo = {\n        id: getTodoId(),\n        completed: false,\n        title,\n        userId,\n      };\n\n      onAdd(newTodo);\n      setUserId(0);\n      setTitle('');\n      setFormSubmitted(false);\n    }\n  };\n\n  return (\n    <>\n      <h1>Add todo form</h1>\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={changeTitle}\n          />\n          {formSubmitted && title.length === 0\n            && (<span className=\"error\">Please enter a title</span>\n            )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={changeUser}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n          {formSubmitted && userId === 0\n            && (<span className=\"error\">Please choose a user</span>\n            )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { ToDo } from './types/ToDo';\nimport { User } from './types/User';\nimport { NewTodo } from './components/NewTodo/NewTodo';\n\nfunction getUserById(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId)\n    || null;\n}\n\nexport const App = () => {\n  const [todos, setTodo] = useState(todosFromServer);\n\n  const addTodo = (todo: ToDo) => {\n    setTodo(currentTodos => [...currentTodos, todo]);\n  };\n\n  const getTodoId = (): number => {\n    const ids = todos.map(todo => todo.id);\n    const maxId = Math.max(...ids);\n\n    return maxId + 1;\n  };\n\n  const todoList: ToDo[] = todos.map(todo => ({\n    ...todo,\n    user: getUserById(todo.userId),\n  }));\n\n  return (\n    <div className=\"App\">\n      <NewTodo onAdd={addTodo} getTodoId={getTodoId} />\n\n      <TodoList todos={todoList} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}